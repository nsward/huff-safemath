// #include './constants.huff'

// check that b > (a + b), return (a + b)
template <throw_error_jump_label>
#define macro MATH__ADD = takes(2) returns(1) {
    // [ a b ]
    dup2                        // [ b a b ]
    add                         // [ (a+b) b ]
    dup1                        // [ (a+b) (a+b) b ]
    swap2                       // [ b (a+b) (a+b) ]
    gt                          // [ (b>(a+b)) (a+b) ]
    <throw_error_jump_label>    // [ throw_error_jump_label (a>(a+b)) (a+b) ]
    jumpi                       // [ (a+b) ]
}

// check that b !> a, return (a - b)
template <throw_error_jump_label>
#define macro MATH__SUB = takes(2) returns(1) {
    // [ a b ]
    dup1                        // [ a a b ]
    dup3                        // [ b a a b ]
    gt                          // [ (b>a) a b ]
    <throw_error_jump_label>    // [ throw_error_jump_label (b>a) a b ]
    jumpi                       // [ a b ]
    sub                         // [ (a-b) ]
}

// check that a == 0 OR (a * b)/b == a, return (x * y)
template <throw_error_jump_label>
#define macro MATH__MUL = takes(2) returns(1) {
    // [ a b ]
    dup2                        // [ b a b ]
    dup2                        // [ a b a b]
    mul                         // [ (a*b) a b ]

    swap1                       // [ a (a*b) b ]
    dup2                        // [ (a*b) a (a*b) b ]
    div                         // [ (a*b/a) (a*b) b ]
    dup3                        // [ b (a*b/a) (a*b) b ]
    eq                          // [ (b==a*b/a) (a*b) b ]
    dup3                        // [ b (b==a*b/a) (a*b) b ]
    iszero                      // [ b==0 (b==a*b/a) (a*b) b ]
    or                          // [ (b==0 || b==a*b/a) (a*b) b ]
    iszero                      // [ !(b==0 || b==a*b/a) (a*b) b ]
    <throw_error_jump_label>    // [ throw_error_jump_label !(b==0 || b==a*b/a) (a*b) b ]
    jumpi                       // [ (a*b) b ]
    swap1                       // [ b (a*b) ]
    pop                         // [ (a*b) ]
}

